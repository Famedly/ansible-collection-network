#jinja2: lstrip_blocks: "True", trim_blocks: "True"
{
  # List of connection strings for outbound peer connections in URI format,
  # e.g. tcp://a.b.c.d:e or socks://a.b.c.d:e/f.g.h.i:j. These connections
  # will obey the operating system routing table, therefore you should
  # use this section when you may connect via different interfaces.
  Peers: [
    {% for peer in yggdrasil_extra_peers %}
      {% if peer.listen_uri is defined %}
    "{{ peer.listen_uri }}",
      {% endif %}
    {% endfor %}
    {% for peer in yggdrasil_ansible_peers %}
      {% if hostvars[peer] is defined %}
        {% if hostvars[peer].yggdrasil_listen_address is defined %}
    "{{ hostvars[peer].yggdrasil_listen_address }}",
        {% endif %}
      {% endif %}
    {% endfor %}
  ]

  # List of connection strings for outbound peer connections in URI format,
  # arranged by source interface, e.g. { "eth0": [ tcp://a.b.c.d:e ] }.
  # Note that SOCKS peerings will NOT be affected by this option and should
  # go in the "Peers" section instead.
  InterfacePeers: {
    {% for interface in yggdrasil_interface_peer_interfaces %}
      {{ interface.identifier }}: [
        {% for peer in interface.peers %}
    "{{ peer }}",
        {% endfor %}
      ],
    {% endfor %}
  }

  # Listen addresses for incoming connections. You will need to add
  # listeners in order to accept incoming peerings from non-local nodes.
  # Multicast peer discovery will work regardless of any listeners set
  # here. Each listener should be specified in URI format as above, e.g.
  # tcp://0.0.0.0:0 or tcp://[::]:0 to listen on all interfaces.
  Listen: [
    "tcp://{{ yggdrasil_config_listen_address }}",
  ]

  # Listen address for admin connections. Default is to listen for local
  # connections either on TCP/9001 or a UNIX socket depending on your
  # platform. Use this value for yggdrasilctl -endpoint=X. To disable
  # the admin socket, use the value "none" instead.
  AdminListen: "{{ yggdrasil_admin_listen_address }}"

  # Regular expressions for which interfaces multicast peer discovery
  # should be enabled on. If none specified, multicast peer discovery is
  # disabled. The default value is .* which uses all interfaces.
  MulticastInterfaces: [
    {% for interface in yggdrasil_multicast_interfaces %}
    "{{ interface }}",
    {% endfor %}
  ]

  # List of peer encryption public keys to allow incoming TCP peering
  # connections from. If left empty/undefined then all connections will
  # be allowed by default. This does not affect outgoing peerings, nor
  # does it affect link-local peers discovered via multicast.
  AllowedEncryptionPublicKeys: [
    {% if yggdrasil_limit_incoming_connections %}
      {% for peer in yggdrasil_extra_peers %}
        {% if peer.public_key is defined %}
    "{{ peer.public_key }}",
        {% endif %}
      {% endfor %}
      {% for peer in yggdrasil_ansible_peers %}
        {% if hostvars[peer] is defined %}
          {% if hostvars[peer].yggdrasil_encryption_public_key is defined %}
    "{{ hostvars[peer].yggdrasil_encryption_public_key }}",
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}
  ]

  # Your public encryption key. Your peers may ask you for this to put
  # into their AllowedEncryptionPublicKeys configuration.
  EncryptionPublicKey: "{{ yggdrasil_encryption_public_key }}"

  # Your private encryption key. DO NOT share this with anyone!
  EncryptionPrivateKey: "{{ yggdrasil_encryption_private_key }}"

  # Your public signing key. You should not ordinarily need to share
  # this with anyone.
  SigningPublicKey: "{{ yggdrasil_signing_public_key }}"

  # Your private signing key. DO NOT share this with anyone!
  SigningPrivateKey: "{{ yggdrasil_signing_private_key }}"

  # The port number to be used for the link-local TCP listeners for the
  # configured MulticastInterfaces. This option does not affect listeners
  # specified in the Listen option. Unless you plan to firewall link-local
  # traffic, it is best to leave this as the default value of 0. This
  # option cannot currently be changed by reloading config during runtime.
  LinkLocalTCPPort: 0

  # Local network interface name for TUN adapter, or "auto" to select
  # an interface automatically, or "none" to run without TUN.
  IfName: auto

  # Maximum Transmission Unit (MTU) size for your local TUN interface.
  # Default is the largest supported size for your platform. The lowest
  # possible value is 1280.
  IfMTU: 65535

  # The session firewall controls who can send/receive network traffic
  # to/from. This is useful if you want to protect this node without
  # resorting to using a real firewall. This does not affect traffic
  # being routed via this node to somewhere else. Rules are prioritised as
  # follows: blacklist, whitelist, always allow outgoing, direct, remote.
  SessionFirewall:
  {
    # Enable or disable the session firewall. If disabled, network traffic
    # from any node will be allowed. If enabled, the below rules apply.
    Enable: {{ yggdrasil_sfw_enable | tojson }}

    # Allow network traffic from directly connected peers.
    AllowFromDirect: {{ yggdrasil_sfw_allow_direct | tojson }}

    # Allow network traffic from remote nodes on the network that you are
    # not directly peered with.
    AllowFromRemote: {{ yggdrasil_sfw_allow_remote | tojson }}

    # Allow outbound network traffic regardless of AllowFromDirect or
    # AllowFromRemote. This does allow a remote node to send unsolicited
    # traffic back to you for the length of the session.
    AlwaysAllowOutbound: {{ yggdrasil_sfw_allow_outbound | tojson }}

    # List of public keys from which network traffic is always accepted,
    # regardless of AllowFromDirect or AllowFromRemote.
    WhitelistEncryptionPublicKeys: [
      {% for peer in yggdrasil_extra_peers %}
        {% if peer.public_key is defined and peer.sfw is defined and peer.sfw == 'whitelisted' %}
      "{{ peer.public_key }}",
        {% endif %}
      {% endfor %}
      {% for peer in yggdrasil_sfw_ansible_whitelist %}
        {% if hostvars[peer] is defined %}
          {% if hostvars[peer].yggdrasil_encryption_public_key is defined %}
      "{{ hostvars[peer].yggdrasil_encryption_public_key }}",
          {% endif %}
        {% endif %}
      {% endfor %}
    ]

    # List of public keys from which network traffic is always rejected,
    # regardless of the whitelist, AllowFromDirect or AllowFromRemote.
    BlacklistEncryptionPublicKeys: [
      {% for peer in yggdrasil_extra_peers %}
        {% if peer.public_key is defined and peer.sfw is defined and peer.sfw == 'blacklisted' %}
      "{{ peer.public_key }}",
        {% endif %}
      {% endfor %}
      {% for peer in yggdrasil_sfw_ansible_blacklist %}
        {% if hostvars[peer] is defined %}
          {% if hostvars[peer].yggdrasil_encryption_public_key is defined %}
      "{{ hostvars[peer].yggdrasil_encryption_public_key }}",
          {% endif %}
        {% endif %}
      {% endfor %}
    ]
  }

  # Allow tunneling non-Yggdrasil traffic over Yggdrasil. This effectively
  # allows you to use Yggdrasil to route to, or to bridge other networks,
  # similar to a VPN tunnel. Tunnelling works between any two nodes and
  # does not require them to be directly peered.
  TunnelRouting:
  {
    # Enable or disable tunnel routing.
    Enable: false

    # IPv6 subnets belonging to remote nodes, mapped to the node's public
    # key, e.g. { "aaaa:bbbb:cccc::/e": "boxpubkey", ... }
    IPv6RemoteSubnets: {}

    # IPv6 subnets belonging to this node's end of the tunnels. Only traffic
    # from these ranges (or the Yggdrasil node's IPv6 address/subnet)
    # will be tunnelled.
    IPv6LocalSubnets: []

    # IPv4 subnets belonging to remote nodes, mapped to the node's public
    # key, e.g. { "a.b.c.d/e": "boxpubkey", ... }
    IPv4RemoteSubnets: {}

    # IPv4 subnets belonging to this node's end of the tunnels. Only traffic
    # from these ranges will be tunnelled.
    IPv4LocalSubnets: []
  }

  # Advanced options for tuning the switch. Normally you will not need
  # to edit these options.
  SwitchOptions:
  {
    # Maximum size of all switch queues combined (in bytes).
    MaxTotalQueueSize: 4194304
  }

  # By default, nodeinfo contains some defaults including the platform,
  # architecture and Yggdrasil version. These can help when surveying
  # the network and diagnosing network routing problems. Enabling
  # nodeinfo privacy prevents this, so that only items specified in
  # "NodeInfo" are sent back if specified.
  NodeInfoPrivacy: {{ yggdrasil_node_info_privacy | tojson }}

  # Optional node info. This must be a { "key": "value", ... } map
  # or set as null. This is entirely optional but, if set, is visible
  # to the whole network on request.
  NodeInfo: {{ yggdrasil_node_info | tojson }}
}
